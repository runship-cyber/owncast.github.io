<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Documentation on</title><link>/docs/</link><description>Recent content in Documentation on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>Configuration</title><link>/docs/configuration/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/configuration/</guid><description>Configuration is done through the Owncast administration page located on your server under /admin. The login username is admin and the password is your stream key, the default being abc123.
Some common items many people would want to update after installing Owncast are:
Your site name, logo, description and external links that are displayed on the web site. The stream key to gain access to broadcasting to your stream and your admin.</description></item><item><title>Embedding into your site</title><link>/docs/embed/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/embed/</guid><description>ðŸ’¡ Embedding Owncast into an existing page who is using HTTPS will require your Owncast server to also be secured with SSL. Embedding video Owncast supports embedding your video stream directly into any other web site or source without having to setup a player.
The video-only URL to your stream content lives at: http://your.host/embed/video.
Here&amp;rsquo;s some example HTML you can use.
&amp;lt;iframe src=&amp;#34;https://your.host/embed/video&amp;#34; title=&amp;#34;Owncast&amp;#34; height=&amp;#34;350px&amp;#34; width=&amp;#34;550px&amp;#34; referrerpolicy=&amp;#34;origin&amp;#34; scrolling=&amp;#34;no&amp;#34; allowfullscreen&amp;gt; &amp;lt;/iframe&amp;gt; Embedding video was first supported in Owncast 0.</description></item><item><title>Run as a system service</title><link>/docs/systemservice/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/systemservice/</guid><description>You can optionally setup Owncast to run under systemd so it&amp;rsquo;s a managed service on your machine that automatically starts when your machine does.
A full example can be found here.
[Unit] Description=Owncast This is where the &amp;ldquo;functional&amp;rdquo; parts of the service live.
[Service] Type=simple WorkingDirectory=[path_to_owncast_root_directory] ExecStart=[path_to_owncast_executable] Restart=on-failure RestartSec=5 WorkingDirectory should be where you want the owncast folder to live.
Example WorkingDirectory=/home/myuser/owncast
Similarly the ExecStart is the actual owncast binary.</description></item><item><title>Troubleshooting</title><link>/docs/troubleshooting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/troubleshooting/</guid><description>CPU and RAM usage alerts If your hardware is being maxed out then your video may not be processed and delivered fast enough to keep up with the real-time requirements of live video.
Here are some steps you can try taking to resolve this.
You may have too many video outputs defined in your settings. Try limiting yourself to a single output, and go from there. Change your settings to use less cpu.</description></item><item><title>Web Site + Chat</title><link>/docs/website/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/website/</guid><description>Overview Owncast includes a web interface for your video with built-in chat that is available once you start the server. It shows online/offline states, viewer counts, stream duration, your instance&amp;rsquo;s description, images, links and more. You can just start using it without making any changes, but you&amp;rsquo;ll likely want to update the content displayed on your page by visiting your server admin page.
Additionally, the web interface was specifically built to be editable by anybody comfortable tweaking a web page.</description></item><item><title>Video</title><link>/docs/video/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/video/</guid><description>This document aims to outline what is being done to your content and the different knobs you can tweak to get the best output for your instance.
ðŸ’¡ Keep in mind it's hard to give specific settings that will give you the best quality and performance with Owncast because people have different servers and requirements. Overview Configure your broadcasting software to send a stream to Owncast that is reasonably close to what you expect to send to your viewers.</description></item><item><title>The Directory</title><link>/docs/directory/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/directory/</guid><description>To help people discover streams by people using Owncast we have an optional Owncast directory you can add yourself to.
Visit the &amp;ldquo;General&amp;rdquo; settings in the admin. Set the public URL to your Owncast instance that you want people to be linked to. Set the &amp;ldquo;About&amp;rdquo; with a brief description of your stream. Set the tags associated with the content you stream. Mark if your content is Not Safe For Work (nsfw).</description></item><item><title>Viewer details</title><link>/docs/viewers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/viewers/</guid><description>Owncast can display high-level geographic information about your current viewers if you enable it in your instance.
Your server can optionally use the MaxMind GeoLite2 Database. If you provide your own free copy of the database it will be used. Perform the following in order to add this feature.
Create a free account with MaxMind. Wait for an email and follow the link to your account. Under Database Products and Subscriptions click Download Databases.</description></item><item><title>Building from Source</title><link>/docs/building/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/building/</guid><description>Ensure you have the gcc compiler installed for your system. Install the Go toolchain. Clone the repo. git clone https://github.com/owncast/owncast go run main.go pkged.go will run the application. Start a stream to your local instance using your broadcasting software. A basic test can be run by running ./test/ocTestStream.sh test/automated/test.mp4. Using Docker Download the code: git clone https://github.com/owncast/owncast Make any configuration changes. If you ever make any future config file changes you must rerun the docker build step otherwise you can just run the docker run step to run the service going forward.</description></item><item><title>Scaling Owncast</title><link>/docs/scaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/scaling/</guid><description>Disclaimer Owncast works great out of the box as a personal streaming service. The ease of install and all-in-one architecture allows for people to get up and running quickly. The downside of this is it requires a bit more thought around large deployments, as you can&amp;rsquo;t just run more copies of Owncast for scale.
If you are not familiar with the topics below, or you don&amp;rsquo;t feel comfortable with the following steps it&amp;rsquo;s unlikely you should be taking on the additional responsibility of a larger deployment of any service.</description></item></channel></rss>