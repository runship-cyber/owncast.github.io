{"version":"https://jsonfeed.org/version/1.1","title":"Build on top of Owncast","description":"Build addons, bots, overlays and other third party tools and apps on top of Owncast","home_page_url":"/","feed_url":"/thirdparty/index.json","language":"en-US","items":[{"title":"APIs \u0026 Access Tokens","date_published":"2020-11-17T20:11:42+01:00","date_modified":"2021-02-08T18:05:08-08:00","id":"/thirdparty/apis/","url":"/thirdparty/apis/","content_html":"\u003cp\u003eWe currently support the following actions you can make via requests from your code.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eEvent\u003c/th\u003e\n\u003cth align=\"center\"\u003eEndpoint\u003c/th\u003e\n\u003cth align=\"right\"\u003eScope\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eSystem chat message\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1streamtitle/post\"\u003e/api/integrations/chat/system\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eCAN_SEND_SYSTEM_MESSAGES\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eUser chat message\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"\"\u003e/api/integrations/chat/user\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eCAN_SEND_MESSAGES\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eChat action\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat~1user/post\"\u003e/api/integrations/chat/action\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eCAN_SEND_SYSTEM_MESSAGES\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eRemove chat message\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat~1updatemessagevisibility/post\"\u003e/api/integrations/chat/messagevisibility\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eHAS_ADMIN_ACCESS\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eGet chat history\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat/get\"\u003e/api/integrations/chat\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eHAS_ADMIN_ACCESS\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eGet connected clients\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1clients/get\"\u003e/api/integrations/clients\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eHAS_ADMIN_ACCESS\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eSet stream title\u003c/td\u003e\n\u003ctd align=\"center\"\u003e\u003ca href=\"/api/latest/#tag/Integrations/paths/~1api~1integrations~1streamtitle/post\"\u003e/api/integrations/streamtitle\u003c/a\u003e\u003c/td\u003e\n\u003ctd align=\"right\"\u003e\u003ccode\u003eHAS_ADMIN_ACCESS\u003c/code\u003e\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eVisit the API documentation for each endpoint to learn more about what values are expected or will be returned.\u003c/p\u003e\n\u003cp\u003eYour Owncast server will only accept actions from requests with a valid Access Token. Follow the below steps to create an access token.\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003evisit \u003ccode\u003e/admin/access-tokens\u003c/code\u003e on your owncast server.\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003eCreate Access Token\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003eSelect the scope of permissions you want to give this token.\u003c/li\u003e\n\u003cli\u003eSave this access token.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"your-code\"\u003eYour code\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eCreate a new request in your code.\u003c/li\u003e\n\u003cli\u003eThis request should send headers with \u003ccode\u003eAuthorization: Bearer\u003c/code\u003e and your access token.\u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eExample request:\u003c/p\u003e\n\u003c!-- prettier-ignore --\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-javascript\" data-lang=\"javascript\"\u003e\u003cspan class=\"p\"\u003e{\u003c/span\u003e\n    \u003cspan class=\"nx\"\u003eheaders\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eContent\u003c/span\u003e\u003cspan class=\"o\"\u003e-\u003c/span\u003e\u003cspan class=\"nx\"\u003eType\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;application/json\u0026#34;\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n        \u003cspan class=\"nx\"\u003eAuthorization\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;Bearer \u0026#34;\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"nx\"\u003eYOUR_ACCESS_TOKEN\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e},\u003c/span\u003e\n    \u003cspan class=\"p\"\u003e{\u003c/span\u003e \u003cspan class=\"nx\"\u003ebody\u003c/span\u003e\u003cspan class=\"o\"\u003e:\u003c/span\u003e \u003cspan class=\"s2\"\u003e\u0026#34;this is a system chat message\u0026#34;\u003c/span\u003e \u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003cspan class=\"p\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n\u003ch3 id=\"test-sending-chat-messages\"\u003eTest sending chat messages\u003c/h3\u003e\n\u003cp\u003eChange the following \u003ccode\u003ecurl\u003c/code\u003e command to point to your server URL and use your auth token. It will send a system message to your chat.\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre class=\"chroma\"\u003e\u003ccode class=\"language-shell\" data-lang=\"shell\"\u003ecurl -X POST -H \u003cspan class=\"s2\"\u003e\u0026#34;Content-Type: application/json\u0026#34;\u003c/span\u003e -H \u003cspan class=\"s2\"\u003e\u0026#34;Authorization: Bearer YOURAUTHTOKEN\u0026#34;\u003c/span\u003e -d \u003cspan class=\"s1\"\u003e\u0026#39;{\u0026#34;body\u0026#34;: \u0026#34;I am a system message!\u0026#34;}\u0026#39;\u003c/span\u003e http://YOUR.OWNCAST.SERVER/api/integrations/chat/system\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\n"},{"title":"Webhooks","date_published":"2020-11-17T20:11:42+01:00","date_modified":"2021-01-25T10:03:32-08:00","id":"/thirdparty/webhooks/","url":"/thirdparty/webhooks/","content_html":"\u003cp\u003eWebhooks will send events to your code when things happen on your Owncast server.  The following are a list of events you can get notified about.\u003c/p\u003e\n\u003ctable\u003e\n\u003cthead\u003e\n\u003ctr\u003e\n\u003cth align=\"left\"\u003eDescription\u003c/th\u003e\n\u003cth align=\"center\"\u003eName\u003c/th\u003e\n\u003c/tr\u003e\n\u003c/thead\u003e\n\u003ctbody\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eStream started\u003c/td\u003e\n\u003ctd align=\"center\"\u003eSTREAM_STARTED\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eStream stopped\u003c/td\u003e\n\u003ctd align=\"center\"\u003eSTREAM_STOPPED\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eUser joined chat\u003c/td\u003e\n\u003ctd align=\"center\"\u003eUSER_JOINED\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eUser sent chat message\u003c/td\u003e\n\u003ctd align=\"center\"\u003eCHAT\u003c/td\u003e\n\u003c/tr\u003e\n\u003ctr\u003e\n\u003ctd align=\"left\"\u003eUser changed username\u003c/td\u003e\n\u003ctd align=\"center\"\u003eNAME_CHANGE\u003c/td\u003e\n\u003c/tr\u003e\n\u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch3 id=\"how-to-accept-webhooks\"\u003eHow to accept webhooks\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eVisit \u003ccode\u003e/admin/webhooks\u003c/code\u003e on your owncast server.\u003c/li\u003e\n\u003cli\u003eClick \u003ccode\u003eCreate Webhook\u003c/code\u003e.\u003c/li\u003e\n\u003cli\u003ePut in the full public URL to an endpoint that can receive this webhook.\u003c/li\u003e\n\u003cli\u003eSelect the events you want to be notified of.\u003c/li\u003e\n\u003cli\u003eSave this new webhook.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"your-code\"\u003eYour code\u003c/h3\u003e\n\u003col\u003e\n\u003cli\u003eIn any language, on any kind of web server, create an endpoint that accepts a HTTP \u003ccode\u003ePOST\u003c/code\u003e request.  This is where Owncast will be sending events.\u003c/li\u003e\n\u003cli\u003eEach event payload will have a \u003ccode\u003etype\u003c/code\u003e property that states what of the above events are included, and an \u003ccode\u003eeventData\u003c/code\u003e object that includes all the specific properties of this event.\u003c/li\u003e\n\u003cli\u003eIf you need a starting point see our example projects.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch3 id=\"test-webhooks\"\u003eTest webhooks\u003c/h3\u003e\n\u003cp\u003eIf you want to test how webhooks work before you write any code, create a test endpoint at \u003ca href=\"https://requestcatcher.com/,\"\u003ehttps://requestcatcher.com/,\u003c/a\u003e and add the URL it gives you as a webhook in your admin and see the requests come through.\u003c/p\u003e\n"},{"title":"External Actions","date_published":"0001-01-01T00:00:00Z","date_modified":"2021-05-15T16:45:21Z","id":"/thirdparty/actions/","url":"/thirdparty/actions/","content_html":"\u003cp\u003eYou can build additional interfaces that are hosted with any add-ons, extensions, or 3rd party sites. Each action is a single URL that will be loaded and displayed when a user presses a button on the Owncast page.\u003c/p\u003e\n\u003cspan class=\"version-support\"\u003e\n  External actions was first supported in \u003ca href=\"https://github.com/owncast/owncast/releases/tag/v0.0.7\"\u003eOwncast 0.0.7\u003c/a\u003e.\n\u003c/span\u003e\n\n\u003cdiv class=\"alert alert-warning d-flex\" role=\"alert\"\u003e\n  \u003cdiv class=\"flex-shrink-1 alert-icon\"\u003e💡\u003c/div\u003e\n  \u003cdiv class=\"w-100\"\u003eThis is brand new functionality that we look forward to you trying out. Since everyone's environments and content differ we hope you let us know what works for you as well as what doesn't. We'll continue to expand the documentation, improve compatibility with things you're building and learn more over time. All suggestions welcome. Enjoy!\u003c/div\u003e\n\u003c/div\u003e\n\u003ch2 id=\"examples\"\u003eExamples\u003c/h2\u003e\n\u003cp\u003eSome examples of this functionality might be things like:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eA leader board for some chat-based game you built or an external game you\u0026rsquo;re playing on stream.\u003c/li\u003e\n\u003cli\u003eLists of actions that perform fun animations on your stream overlays when selected.\u003c/li\u003e\n\u003cli\u003eIntegrations with your polling chat bot that shows recent polls and the results.\u003c/li\u003e\n\u003cli\u003eTip Jar to accept donations.\u003c/li\u003e\n\u003cli\u003eA schedule that is fancier or more interactive than what you can represent in Markdown.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"limitations\"\u003eLimitations\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eExternal actions must be hosted on a server that supports SSL and has a \u003ccode\u003ehttps\u003c/code\u003e protocol. Unsecured URLs are not supported.\u003c/li\u003e\n\u003cli\u003eThese URLs must support existing inside an iframe. This means \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\u003eX-FRAME-OPTIONS\u003c/a\u003e and the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\u003eCSP\u003c/a\u003e cannot be blocking. If you are blocked then you\u0026rsquo;re limited to loading this URL in a new tab and that\u0026rsquo;s not a great experience.\u003c/li\u003e\n\u003cli\u003eWhile you can experiment with using URLs that you don\u0026rsquo;t personally control, it\u0026rsquo;s often likely that many of them will not work due to limitations placed on the remote server. An example of this is just throwing in a PayPal or Google URL.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"how-to-register-actions\"\u003eHow to register actions\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eVisit the admin, and under \u0026ldquo;Integrations\u0026rdquo; go to the \u0026ldquo;External Actions\u0026rdquo; page.\u003c/li\u003e\n\u003cli\u003eAdd an action.\u003c/li\u003e\n\u003cli\u003ePut the URL of this action. It should be a HTTPS destination and follow the best practices listed.\u003c/li\u003e\n\u003cli\u003eGive it a name that will be displayed on the button that launches this action, an optional description that will show in the modal that presents the action, a URL to an optional icon for the button, and optionally a color that will be used for the button.\u003c/li\u003e\n\u003cli\u003eIf you really want to register a URL you don\u0026rsquo;t control, but it doesn\u0026rsquo;t work with the default functionality, you can tell it to \u0026ldquo;Open Externally\u0026rdquo; and it will open a new tab in your browser. This is not optimal, but it\u0026rsquo;s an option.\u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2 id=\"best-practices\"\u003eBest practices\u003c/h2\u003e\n\u003col\u003e\n\u003cli\u003eThis action\u0026rsquo;s UI should perform little to no navigation. It shouldn\u0026rsquo;t be treated as a way to show just any page.\u003c/li\u003e\n\u003cli\u003eDesign your UI to live in a small window that doesn\u0026rsquo;t require much, if any, scrolling, and is responsive to mobile and small displays.\u003c/li\u003e\n\u003cli\u003eMake sure your URL\u0026rsquo;s server allows loading your content from your Owncast server via \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Frame-Options\"\u003eX-FRAME-OPTIONS\u003c/a\u003e and the \u003ca href=\"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy\"\u003eCSP\u003c/a\u003e.\u003c/li\u003e\n\u003cli\u003eThe chat username of the person who fired this action is passed along as a URL parameter so you can pre-fill any forms for convenience. You should utilize this.\u003c/li\u003e\n\u003cli\u003eThe instance URL of the Owncast server that is displaying this action UI is passed along as a URL parameter so if you happen to be hosting actions for multiple servers you can know where it\u0026rsquo;s coming from. \u003cstrong\u003eNote:\u003c/strong\u003e You shouldn\u0026rsquo;t perform arbitrary API requests just because this parameter exists, since anybody can easily fake it.\u003c/li\u003e\n\u003c/ol\u003e\n"},{"title":"Sample Projects","date_published":"2020-11-17T20:11:42+01:00","date_modified":"2021-01-25T14:34:07-08:00","id":"/thirdparty/samples/","url":"/thirdparty/samples/","content_html":"\u003cp\u003eThe following example projects are a work-in-progress.  If you\u0026rsquo;d like to help with them, we\u0026rsquo;d love to have you contribute!  Also, if you want to write some basic examples in a different language, that would be awesome.\u003c/p\u003e\n\u003ch3 id=\"empty-project\"\u003eEmpty Project\u003c/h3\u003e\n\u003cp\u003eThe following is a project setup for you to simply add your logic to a basic scaffolding of a Node.js project.  If you\u0026rsquo;re looking to start a new Node.js project then this might be a good place to start.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://glitch.com/edit/#!/owncast-addon\"\u003ehttps://glitch.com/edit/#!/owncast-addon\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"dancing-banana\"\u003eDancing Banana\u003c/h3\u003e\n\u003cp\u003e\u003ca href=\"https://github.com/geekgonecrazy/livestream-banana-bot\"\u003ehttps://github.com/geekgonecrazy/livestream-banana-bot\u003c/a\u003e\u003c/p\u003e\n\n\u003cdiv style=\"position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;\"\u003e\n  \u003ciframe src=\"https://www.youtube.com/embed/1bAfwBwdbKg\" style=\"position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;\" allowfullscreen title=\"YouTube Video\"\u003e\u003c/iframe\u003e\n\u003c/div\u003e\n\n\u003ch3 id=\"notify-followers-via-email-or-sms-when-you-go-live\"\u003eNotify followers via Email or SMS when you go live\u003c/h3\u003e\n\u003cp\u003eThis project allows people to put in their phone number or email address to get notified any time you go live.  It uses Mailgun for email and Twilio for text messages.  It also has an embed where it thanks the user for following you on your stream.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://glitch.com/edit/#!/owncast-example-follow\"\u003ehttps://glitch.com/edit/#!/owncast-example-follow\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"tip-jar\"\u003eTip Jar\u003c/h3\u003e\n\u003cp\u003eThis project includes a page where people can tip you during your stream.  It uses Stripe as a payment processor.  When a payment is successful it sends a message to your chat.  TODO: Add an embed so you thank tippers via an image/message on your stream.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://glitch.com/edit/#!/owncast-example-tip-jar\"\u003ehttps://glitch.com/edit/#!/owncast-example-tip-jar\u003c/a\u003e\u003c/p\u003e\n\u003ch3 id=\"emoji-wall\"\u003eEmoji Wall\u003c/h3\u003e\n\u003cp\u003eThis project is a simple embed that listens on that chat for people sending custom emojis.  If one or more custom emoji are sent in a message then they float by on the embed.\u003c/p\u003e\n\u003cp\u003e\u003ca href=\"https://glitch.com/edit/#!/owncast-example-emoji-wall\"\u003ehttps://glitch.com/edit/#!/owncast-example-emoji-wall\u003c/a\u003e\u003c/p\u003e\n"}]}