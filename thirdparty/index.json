{"data":[{"name":"APIs & Access Tokens","content":"&lt;p&gt;We currently support the following actions you can make via requests from your code.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Event&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Endpoint&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Scope&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;System chat message&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1streamtitle/post&#34;&gt;/api/integrations/chat/system&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;CAN_SEND_SYSTEM_MESSAGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;User chat message&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;&#34;&gt;/api/integrations/chat/user&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;CAN_SEND_MESSAGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Chat action&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat~1user/post&#34;&gt;/api/integrations/chat/action&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;CAN_SEND_SYSTEM_MESSAGES&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Remove chat message&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat~1updatemessagevisibility/post&#34;&gt;/api/integrations/chat/messagevisibility&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;HAS_ADMIN_ACCESS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Get chat history&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1chat/get&#34;&gt;/api/integrations/chat&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;HAS_ADMIN_ACCESS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Get connected clients&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1clients/get&#34;&gt;/api/integrations/clients&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;HAS_ADMIN_ACCESS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Set stream title&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;&lt;a href=&#34;/api/latest/#tag/Integrations/paths/~1api~1integrations~1streamtitle/post&#34;&gt;/api/integrations/streamtitle&lt;/a&gt;&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;&lt;code&gt;HAS_ADMIN_ACCESS&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;Visit the API documentation for each endpoint to learn more about what values are expected or will be returned.&lt;/p&gt;
&lt;p&gt;Your Owncast server will only accept actions from requests with a valid Access Token. Follow the below steps to create an access token.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;visit &lt;code&gt;/admin/access-tokens&lt;/code&gt; on your owncast server.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create Access Token&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Select the scope of permissions you want to give this token.&lt;/li&gt;
&lt;li&gt;Save this access token.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;your-code&#34;&gt;Your code&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Create a new request in your code.&lt;/li&gt;
&lt;li&gt;This request should send headers with &lt;code&gt;Authorization: Bearer&lt;/code&gt; and your access token.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Example request:&lt;/p&gt;
&lt;!-- prettier-ignore --&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nx&#34;&gt;headers&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Content&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;application/json&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
        &lt;span class=&#34;nx&#34;&gt;Authorization&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Bearer &amp;#34;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;YOUR_ACCESS_TOKEN&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;body&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;this is a system chat message&amp;#34;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;test-sending-chat-messages&#34;&gt;Test sending chat messages&lt;/h3&gt;
&lt;p&gt;Change the following &lt;code&gt;curl&lt;/code&gt; command to point to your server URL and use your auth token. It will send a system message to your chat.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl -X POST -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Content-Type: application/json&amp;#34;&lt;/span&gt; -H &lt;span class=&#34;s2&#34;&gt;&amp;#34;Authorization: Bearer YOURAUTHTOKEN&amp;#34;&lt;/span&gt; -d &lt;span class=&#34;s1&#34;&gt;&amp;#39;{&amp;#34;body&amp;#34;: &amp;#34;I am a system message!&amp;#34;}&amp;#39;&lt;/span&gt; http://YOUR.OWNCAST.SERVER/api/integrations/chat/system&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
","permalink":"/thirdparty/apis/"},{"name":"Webhooks","content":"&lt;p&gt;Webhooks will send events to your code when things happen on your Owncast server.  The following are a list of events you can get notified about.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Description&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Stream started&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;STREAM_STARTED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;Stream stopped&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;STREAM_STOPPED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;User joined chat&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;USER_JOINED&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;User sent chat message&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;CHAT&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;User changed username&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;NAME_CHANGE&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;how-to-accept-webhooks&#34;&gt;How to accept webhooks&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;Visit &lt;code&gt;/admin/webhooks&lt;/code&gt; on your owncast server.&lt;/li&gt;
&lt;li&gt;Click &lt;code&gt;Create Webhook&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Put in the full public URL to an endpoint that can receive this webhook.&lt;/li&gt;
&lt;li&gt;Select the events you want to be notified of.&lt;/li&gt;
&lt;li&gt;Save this new webhook.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;your-code&#34;&gt;Your code&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;In any language, on any kind of web server, create an endpoint that accepts a HTTP &lt;code&gt;POST&lt;/code&gt; request.  This is where Owncast will be sending events.&lt;/li&gt;
&lt;li&gt;Each event payload will have a &lt;code&gt;type&lt;/code&gt; property that states what of the above events are included, and an &lt;code&gt;eventData&lt;/code&gt; object that includes all the specific properties of this event.&lt;/li&gt;
&lt;li&gt;If you need a starting point see our example projects.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;test-webhooks&#34;&gt;Test webhooks&lt;/h3&gt;
&lt;p&gt;If you want to test how webhooks work before you write any code, create a test endpoint at &lt;a href=&#34;https://requestcatcher.com/,&#34;&gt;https://requestcatcher.com/,&lt;/a&gt; and add the URL it gives you as a webhook in your admin and see the requests come through.&lt;/p&gt;
","permalink":"/thirdparty/webhooks/"},{"name":"Sample Projects","content":"&lt;p&gt;The following example projects are a work-in-progress.  If you&amp;rsquo;d like to help with them, we&amp;rsquo;d love to have you contribute!  Also, if you want to write some basic examples in a different language, that would be awesome.&lt;/p&gt;
&lt;h3 id=&#34;empty-project&#34;&gt;Empty Project&lt;/h3&gt;
&lt;p&gt;The following is a project setup for you to simply add your logic to a basic scaffolding of a Node.js project.  If you&amp;rsquo;re looking to start a new Node.js project then this might be a good place to start.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/owncast-addon&#34;&gt;https://glitch.com/edit/#!/owncast-addon&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;dancing-banana&#34;&gt;Dancing Banana&lt;/h3&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/geekgonecrazy/livestream-banana-bot&#34;&gt;https://github.com/geekgonecrazy/livestream-banana-bot&lt;/a&gt;&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;https://www.youtube.com/embed/1bAfwBwdbKg&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;h3 id=&#34;notify-followers-via-email-or-sms-when-you-go-live&#34;&gt;Notify followers via Email or SMS when you go live&lt;/h3&gt;
&lt;p&gt;This project allows people to put in their phone number or email address to get notified any time you go live.  It uses Mailgun for email and Twilio for text messages.  It also has an embed where it thanks the user for following you on your stream.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/owncast-example-follow&#34;&gt;https://glitch.com/edit/#!/owncast-example-follow&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;tip-jar&#34;&gt;Tip Jar&lt;/h3&gt;
&lt;p&gt;This project includes a page where people can tip you during your stream.  It uses Stripe as a payment processor.  When a payment is successful it sends a message to your chat.  TODO: Add an embed so you thank tippers via an image/message on your stream.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/owncast-example-tip-jar&#34;&gt;https://glitch.com/edit/#!/owncast-example-tip-jar&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;emoji-wall&#34;&gt;Emoji Wall&lt;/h3&gt;
&lt;p&gt;This project is a simple embed that listens on that chat for people sending custom emojis.  If one or more custom emoji are sent in a message then they float by on the embed.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://glitch.com/edit/#!/owncast-example-emoji-wall&#34;&gt;https://glitch.com/edit/#!/owncast-example-emoji-wall&lt;/a&gt;&lt;/p&gt;
","permalink":"/thirdparty/samples/"}]}