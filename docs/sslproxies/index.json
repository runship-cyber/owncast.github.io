{"data":[{"name":"Caddy","content":"&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/&#34;&gt;Caddy&lt;/a&gt; is the fastest way to setup a SSL reverse proxy with a free certificate from &lt;a href=&#34;https://letsencrypt.org/&#34;&gt;Let&amp;rsquo;s Encrypt&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;While we will try to walk you through some installation steps &lt;strong&gt;it is highly suggested you follow Caddy&amp;rsquo;s &lt;a href=&#34;https://caddyserver.com/docs/install&#34;&gt;Install options&lt;/a&gt; and &lt;a href=&#34;https://caddyserver.com/docs/quick-starts/reverse-proxy&#34;&gt;Reverse Proxy Quickstart&lt;/a&gt; for more documentation, examples and detailed information&lt;/strong&gt;. Caddy is a well documented quality piece of software that you should get familiar with if you need to run a SSL reverse proxy.&lt;/p&gt;
&lt;h2 id=&#34;1-make-sure-you-dont-have-other-web-servers-running&#34;&gt;1. Make sure you don&amp;rsquo;t have other web servers running.&lt;/h2&gt;
&lt;p&gt;If you are running other pieces of web server software such as Apache or NGINX using port 80 or 443 then you won&amp;rsquo;t be able to continue with this Caddy install. Either remove the other pieces of software or read up on how to make them live in harmony.&lt;/p&gt;
&lt;h2 id=&#34;2-install-caddy&#34;&gt;2. Install Caddy&lt;/h2&gt;
&lt;p&gt;Depending on your system there may be different options on installing. Using APT is suggested if it&amp;rsquo;s supported on your machine.&lt;/p&gt;
&lt;details&gt;
  &lt;summary&gt;Using APT (recommended) &lt;/summary&gt;
&lt;p&gt;Installing this package automatically starts and runs Caddy for you as a systemd service so it will automatically run Caddy each time you start your machine.
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https
curl -1sLf &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://dl.cloudsmith.io/public/caddy/stable/gpg.key&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo apt-key add -
curl -1sLf &lt;span class=&#34;s1&#34;&gt;&amp;#39;https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; sudo tee -a /etc/apt/sources.list.d/caddy-stable.list
sudo apt update
sudo apt install caddy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/docs/install#debian-ubuntu-raspbian&#34;&gt;Read the Caddy install steps for using apt&lt;/a&gt; for more details.&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Download manually&lt;/summary&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/caddyserver/caddy/releases&#34;&gt;Visit the releases page&lt;/a&gt; and expand the &amp;ldquo;assets&amp;rdquo; section.&lt;/li&gt;
&lt;li&gt;Find the version for your platform and operating system.&lt;/li&gt;
&lt;li&gt;Unarchive the file: &lt;code&gt;tar -xvzf caddy_2.3.0_linux_amd64.tar.gz&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You&amp;rsquo;re likely to want to setup Caddy as a system service to auatomatically start in the background.  &lt;a href=&#34;https://caddyserver.com/docs/install#linux-service&#34;&gt;Learn how to do this&lt;/a&gt;.
&lt;a href=&#34;https://caddyserver.com/docs/install#static-binaries&#34;&gt;Read the Caddy download page for more details.&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/details&gt;
&lt;h2 id=&#34;3-run-caddy-as-a-reverse-proxy&#34;&gt;3. Run Caddy as a reverse proxy&lt;/h2&gt;
&lt;details&gt;
  &lt;summary&gt;Single command line&lt;/summary&gt;
&lt;p&gt;It offers automatic configuration of HTTPS with a single command.&lt;/p&gt;
&lt;p&gt;&lt;button class=&#34;btn-clipboard btn btn-sm btn-link&#34; data-clipboard-text=&#34;caddy reverse-proxy --from owncast.mydomain.com --to 127.0.0.1:8080&#34;&gt;&lt;span class=&#34;copy-status&#34;&gt;&lt;/span&gt;&lt;/button&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;caddy reverse-proxy --from owncast.mydomain.com --to 127.0.0.1:8080&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;owncast.mydomain.com&lt;/code&gt; with the public hostname of your Owncast server like &lt;code&gt;watch.owncast.online&lt;/code&gt; for example.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://caddyserver.com/docs/quick-starts/reverse-proxy&#34;&gt;Read the Caddy reverse proxy documentation for more details.&lt;/a&gt;&lt;/p&gt;
&lt;/details&gt;
&lt;details&gt;
  &lt;summary&gt;Caddyfile&lt;/summary&gt;
&lt;p&gt;The &lt;a href=&#34;https://caddyserver.com/docs/caddyfile&#34;&gt;Caddyfile&lt;/a&gt; is Caddy&amp;rsquo;s config file.&lt;/p&gt;
&lt;p&gt;Add to your Caddyfile:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-caddyfile&#34; data-lang=&#34;caddyfile&#34;&gt;owncast.mydomain.com {
encode gzip
reverse_proxy 127.0.0.1:8080
tls webmaster@mydomain.com
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Replace &lt;code&gt;owncast.mydomain.com&lt;/code&gt; with the public hostname of your Owncast server like &lt;code&gt;watch.owncast.online&lt;/code&gt; for example.&lt;/p&gt;
&lt;/details&gt;
&lt;hr&gt;
&lt;p&gt;If you specify &lt;code&gt;owncast.mydomain.com&lt;/code&gt; without a protocol or a port, it will attempt to use the default &lt;code&gt;http&lt;/code&gt; and &lt;code&gt;https&lt;/code&gt; ports (80 and 443). Since these are &lt;a href=&#34;https://www.w3.org/Daemon/User/Installation/PrivilegedPorts.html#:~:text=Priviliged%20ports,has%20put%20up%20for%20you.&#34;&gt;&lt;em&gt;privileged ports&lt;/em&gt;&lt;/a&gt;, you will need to run caddy with &lt;code&gt;sudo&lt;/code&gt; or as &lt;code&gt;root&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;4-run-owncast-normally&#34;&gt;4. Run Owncast normally&lt;/h2&gt;
&lt;p&gt;Continue to run Owncast on port 8080.&lt;/p&gt;
&lt;h2 id=&#34;5-access-owncast-through-the-proxy&#34;&gt;5. Access Owncast through the proxy&lt;/h2&gt;
&lt;hr&gt;
&lt;p&gt;You should now be able to access your Owncast server by visiting &lt;a href=&#34;https://owncast.mydomain.com&#34;&gt;https://owncast.mydomain.com&lt;/a&gt; instead of &lt;a href=&#34;http://owncast.mydomain.com&#34;&gt;http://owncast.mydomain.com&lt;/a&gt;:8080.&lt;/p&gt;
&lt;p&gt;Replace &lt;code&gt;owncast.mydomain.com&lt;/code&gt; with the public hostname of your Owncast server like &lt;code&gt;watch.owncast.online&lt;/code&gt; for example.&lt;/p&gt;
","permalink":"/docs/sslproxies/caddy/"},{"name":"NGINX","content":"&lt;p&gt;NGINX is a popular web server used as a reverse proxy with free Let&amp;rsquo;s Encrypt certificates.  Visit the &lt;a href=&#34;https://www.nginx.com/blog/using-free-ssltls-certificates-from-lets-encrypt-with-nginx/&#34;&gt;official documentation&lt;/a&gt; for detailed instructions.&lt;/p&gt;
&lt;h2 id=&#34;websockets&#34;&gt;Websockets&lt;/h2&gt;
&lt;p&gt;People often look over the need to tell NGINX to proxy websockets correctly, leading to chat being disabled.  Please read the quick &lt;a href=&#34;https://nginx.org/en/docs/http/websocket.html&#34;&gt;documentation by nginx around websocket support&lt;/a&gt; to make sure you&amp;rsquo;re doing it properly.&lt;/p&gt;
&lt;p&gt;You&amp;rsquo;ll end up with a configuration that looks somewhat like the following when you&amp;rsquo;re done setting up NGINX.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-nginx&#34; data-lang=&#34;nginx&#34;&gt;&lt;span class=&#34;k&#34;&gt;server&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kn&#34;&gt;server_name&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;owncast.yourdomain.com&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;kn&#34;&gt;location&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Host&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;X-Forwarded-Host&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;X-Forwarded-Server&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$host&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;X-Forwarded-Proto&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$scheme&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;X-Real-IP&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$remote_addr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;X-Forwarded-For&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$proxy_add_x_forwarded_for&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_http_version&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;.1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Upgrade&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$http_upgrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_set_header&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;Connection&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$connection_upgrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;proxy_pass&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;http://127.0.0.1:8080&lt;/span&gt;
        
        &lt;span class=&#34;s&#34;&gt;listen&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;443&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;ssl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;ssl_certificate&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/letsencrypt/live/yourdomain.com/fullchain.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;ssl_certificate_key&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/letsencrypt/live/yourdomain.com/privkey.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;include&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/letsencrypt/options-ssl-nginx.conf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;kn&#34;&gt;ssl_dhparam&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;/etc/letsencrypt/ssl-dhparams.pem&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
","permalink":"/docs/sslproxies/nginx/"},{"name":"Apache","content":"&lt;p&gt;Apache requires the most boilerplate configuration, but if you&amp;rsquo;re already using Apache as a web server you can &lt;a href=&#34;https://httpd.apache.org/docs/2.4/howto/reverse_proxy.html&#34;&gt;configure it as a reverse proxy&lt;/a&gt; in front of your Owncast server to enable SSL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-ApacheConf&#34; data-lang=&#34;ApacheConf&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:80&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; live.example.com
        &lt;span class=&#34;nb&#34;&gt;ServerAdmin&lt;/span&gt; admin@example.com

        &lt;span class=&#34;nb&#34;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;on&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{SERVER_NAME} =live.example.com
        &lt;span class=&#34;nb&#34;&gt;RewriteRule&lt;/span&gt; ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent]
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;# live-le-ssl.conf&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;IfModule&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;mod_ssl.c&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;VirtualHost&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*:443&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;ServerName&lt;/span&gt; live.example.com
        &lt;span class=&#34;nb&#34;&gt;ServerAdmin&lt;/span&gt; admin@example.com

        &lt;span class=&#34;nb&#34;&gt;ProxyRequests&lt;/span&gt;       &lt;span class=&#34;k&#34;&gt;Off&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;ProxyPreserveHost&lt;/span&gt;   &lt;span class=&#34;k&#34;&gt;On&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;AllowEncodedSlashes&lt;/span&gt; NoDecode

        &lt;span class=&#34;nt&#34;&gt;&amp;lt;Proxy&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
          &lt;span class=&#34;nb&#34;&gt;Order&lt;/span&gt; deny,allow
          &lt;span class=&#34;nb&#34;&gt;Allow&lt;/span&gt; from &lt;span class=&#34;k&#34;&gt;all&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Proxy&amp;gt;&lt;/span&gt;

        &lt;span class=&#34;nb&#34;&gt;ProxyPass&lt;/span&gt;        / http://localhost:8080/
        &lt;span class=&#34;nb&#34;&gt;ProxyPassReverse&lt;/span&gt; / http://localhost:8080/

        &lt;span class=&#34;nb&#34;&gt;RequestHeader&lt;/span&gt;    set X-Forwarded-Proto &lt;span class=&#34;s2&#34;&gt;&amp;#34;https&amp;#34;&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;RequestHeader&lt;/span&gt;    set X-Forwarded-Port &lt;span class=&#34;s2&#34;&gt;&amp;#34;443&amp;#34;&lt;/span&gt;

        &lt;span class=&#34;c&#34;&gt;# setup the proxy to forward websocket requests properly&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# (note: this proxy automatically converts the secure websocket (wss)&lt;/span&gt;
        &lt;span class=&#34;c&#34;&gt;# to a normal websocket and vice versa.&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;RewriteEngine&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;On&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{HTTP:UPGRADE} ^WebSocket$           [NC,OR]
        &lt;span class=&#34;nb&#34;&gt;RewriteCond&lt;/span&gt; %{HTTP:CONNECTION} ^Upgrade$          [NC]
        &lt;span class=&#34;nb&#34;&gt;RewriteRule&lt;/span&gt; .* ws://127.0.0.1:8080%{REQUEST_URI}  [P,QSA,L]

        &lt;span class=&#34;nb&#34;&gt;SSLCertificateFile&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/path/to/fullchain.pem&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;SSLCertificateKeyFile&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/path/to/privkey.pem&lt;/span&gt;
        &lt;span class=&#34;nb&#34;&gt;Include&lt;/span&gt; &lt;span class=&#34;sx&#34;&gt;/etc/letsencrypt/options-ssl-apache.conf&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/VirtualHost&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/IfModule&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
","permalink":"/docs/sslproxies/apache/"}]}