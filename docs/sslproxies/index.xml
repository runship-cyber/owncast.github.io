<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>SSL &amp; HTTP Proxies on</title><link>/docs/sslproxies/</link><description>Recent content in SSL &amp; HTTP Proxies on</description><generator>Hugo -- gohugo.io</generator><language>en-US</language><atom:link href="/docs/sslproxies/index.xml" rel="self" type="application/rss+xml"/><item><title>Caddy</title><link>/docs/sslproxies/caddy/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/caddy/</guid><description>Caddy is the fastest way to setup a SSL reverse proxy with a free certificate from Let&amp;rsquo;s Encrypt.
While we will try to walk you through some installation steps it is highly suggested you follow Caddy&amp;rsquo;s Install options and Reverse Proxy Quickstart for more documentation, examples and detailed information. Caddy is a well documented quality piece of software that you should get familiar with if you need to run a SSL reverse proxy.</description></item><item><title>NGINX</title><link>/docs/sslproxies/nginx/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/nginx/</guid><description>NGINX is a popular web server used as a reverse proxy with free Let&amp;rsquo;s Encrypt certificates. Visit the official documentation for detailed instructions.
Websockets People often look over the need to tell NGINX to proxy websockets correctly, leading to chat being disabled. Please read the quick documentation by nginx around websocket support to make sure you&amp;rsquo;re doing it properly.
You&amp;rsquo;ll end up with a configuration that looks somewhat like the following when you&amp;rsquo;re done setting up NGINX.</description></item><item><title>Apache</title><link>/docs/sslproxies/apache/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/apache/</guid><description>Apache requires the most boilerplate configuration, but if you&amp;rsquo;re already using Apache as a web server you can configure it as a reverse proxy in front of your Owncast server to enable SSL.
Ensure required Apache modules are enabled using the a2enmod command.
$ sudo a2enmod proxy proxy_http proxy_wstunnel ssl &amp;lt;VirtualHost \*:80&amp;gt; ServerName live.example.com ServerAdmin admin@example.com RewriteEngine on RewriteCond %{SERVER_NAME} =live.example.com RewriteRule ^ https://%{SERVER_NAME}%{REQUEST_URI} [END,NE,R=permanent] &amp;lt;/VirtualHost&amp;gt; # live-le-ssl.conf &amp;lt;IfModule mod_ssl.c&amp;gt; &amp;lt;VirtualHost *:443&amp;gt; ServerName live.</description></item><item><title>Site.js</title><link>/docs/sslproxies/sitejs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/sslproxies/sitejs/</guid><description>Site.js is a toolset by the Small Technology Foundation that allows you to easily setup a production web server. Additionally it can install Owncast for you, supporting SSL, configured to run as a service.
Visit the install using Site.js page for more details.</description></item></channel></rss>